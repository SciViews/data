% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{read}
\alias{read}
\alias{type_from_extension}
\alias{hread_text}
\alias{hread_xls}
\alias{hread_xlsx}
\alias{$.subsettable_type}
\title{Read data in \R in different formats}
\usage{
read(file, type = NULL, header = "#", header.max = 50L, skip = 0L,
  locale = default_locale(), lang = "en", comments = NULL,
  package = NULL, sidecar_file = TRUE, fun_list = NULL, hfun = NULL,
  fun = NULL, ...)

type_from_extension(file)

hread_text(file, header.max, skip = 0L, locale = default_locale(), ...)

hread_xls(file, header.max, skip = 0L, locale = default_locale(), ...)

hread_xlsx(file, header.max, skip = 0L, locale = default_locale(), ...)

\method{$}{subsettable_type}(x, name)
}
\arguments{
\item{file}{The path to the file to read, or the name of the dataset to get
from an \R package (in that case, you \strong{must} provide the \code{package=}
argument).}

\item{type}{The type (format) of data to read.}

\item{header}{The character to use for the header and other comments.}

\item{header.max}{The maximum of lines to consider for the header.}

\item{skip}{The number of lines to skip at the beginning of the file.}

\item{locale}{The encoding of the file.}

\item{lang}{The language to use (mainly for comment, label and units), but
also for factor levels or other chanracter strings if a translation if the
language is provided in uppercase characters.}

\item{comments}{Comments to add in the created object.}

\item{package}{The package where to look for the dataset. If \code{file=} is not
provided, a list of available datasets in the package is displayed.}

\item{sidecar_file}{If \code{TRUE} and a file with same name as \code{file=} + \code{.R} is
found in the same directory, it is considered as code to import these data
and it is sourced with \code{local = TRUE}, \code{chdir = TRUE} and
\code{verbose = FALSE}. That script \strong{must} create an object named \code{dataset},
which is the result that is returned by the function.}

\item{fun_list}{The table with correspondance of the types, read, and write
functions.}

\item{hfun}{The function to read the header (lines starting with a special
mark, usually '#' at the beginning of the file). This function must have
the same arguments as \code{hread_text()} and should return a character string
with the first \code{header.max} lines.}

\item{fun}{The function to delegate reading of the data. If \code{NULL} (default),
The function is chosen from \code{fun_list}.}

\item{...}{Further arguments passed to the function \code{fun=}.}

\item{x}{A \code{subsettable_type} function.}

\item{name}{The value to use for the \code{type=} argument.}
}
\value{
An \R object with the data (its class depends on the data being read).
}
\description{
Read and return an \R object from data on disk, from URL, or
from packages.
}
\details{
\code{read()} allows for a unique entry point to read various kinds of
data, but it delegates the actual work to various other functions dispatched
accross several \R packages. See \code{getOption("read_write")}.
}
\examples{
# Use of read() as a more flexible substitute to data() (can change dataset
# name and syntax more similar to read R datasets and datasets from files)
read() # List all available datasets in your installed version of R
# List datasets in one particular package
read(package = "data")
# Read one dataset from an R package, possibly changing its name
(urchin <- read("urchin_bio", package = "data"))

# Many example data files in the /extdata subdirectory of the package
data_example <- function(path)
  system.file("extdata", path, package = "data", mustWork = TRUE)

# Read from a Github Gist (need to specify the type here!)
(ble <- read$csv("http://tinyurl.com/Biostat-Ble"))

# Various versions of the famous iris dataset
(iris <- read(data_example("iris.csv")))
(iris <- read(data_example("iris.csv.zip")))
(iris <- read(data_example("iris.csv.tar"))) ##
(iris <- read(data_example("iris.csv.tar.gz"))) ##
(iris <- read(data_example("iris.csv.gz")))
(iris <- read(data_example("iris.csv.bz2")))
(iris <- read(data_example("iris.tsv")))
(iris <- read(data_example("iris.xls")))
(iris <- read(data_example("iris.xlsx")))
(iris <- read(data_example("iris.rds"))) # Does not tranform into tibble!
#(iris <- read(data_example("iris.syd"))) ##
#(iris <- read(data_example("iris.csvy"))) ##
#(iris <- read(data_example("iris.csvy.zip"))) ##

# A file with an header both in English (default) and in French
(iris <- read(data_example("iris_short_header.csv")))
(iris_fr <- read(data_example("iris_short_header.csv"), lang = "fr"))
# Headers are also recognized in xls/xlsx files
(iris_fr <- read(data_example("iris_short_header.xls"), lang = "fr"))

# Require the feather package
#(iris <- read(data_example("iris.feather"))) # Not avaiable for all Win

# Challenging datasets from the readr package
library(readr)
(mtcars <- read(readr_example("mtcars.csv")))
(mtcars <- read(readr_example("mtcars.csv.zip")))
(mtcars <- read(readr_example("mtcars.csv.bz2")))
(challenge <- read(readr_example("challenge.csv"), guess_max = 1001))
(massey <- read(readr_example("massey-rating.txt")))
# By default, the type cannot be guessed from the extension
# This is a space-separated vaules file (ssv)
(massey <- read(readr_example("massey-rating.txt"), type = "ssv"))
# or ...
(massey <- read$ssv(readr_example("massey-rating.txt")))
(epa <- read$ssv(readr_example("epa78.txt"), col_names = FALSE))
(example_log <- read(readr_example("example.log")))
# There are different ways to specify columns for fixed-width files (fwf)
# See ?read_fwf in package readr
(fwf_sample <- read$fwf(readr_example("fwf-sample.txt"),
   col_positions =  fwf_cols(name = 20, state = 10, ssn = 12)))

# Various examples of Excel datasets from readxl
library(readxl)
(xl <- read(readxl_example("datasets.xls")))
(xl <- read(readxl_example("datasets.xlsx"), sheet = "mtcars"))
(xl <- read(readxl_example("datasets.xlsx"), sheet = 3))
# Accomodate a column with disparate types via col_type = "list"
(clip <- read(readxl_example("clippy.xls"), col_types = c("text", "list")))
(clip <- read(readxl_example("clippy.xlsx"), col_types = c("text", "list")))
tibble::deframe(clip)
# Read from a specific range in a sheet
(xl <- read(readxl_example("datasets.xlsx"), range = "mtcars!B1:D5"))
(deaths <- read(readxl_example("deaths.xls"), range = cell_rows(5:15)))
(deaths <- read(readxl_example("deaths.xlsx"), range = cell_rows(5:15)))
(type_me <- read(readxl_example("type-me.xls"), sheet = "logical_coercion",
  col_types = c("logical", "text")))
(type_me <- read(readxl_example("type-me.xlsx"), sheet = "numeric_coercion",
  col_types = c("numeric", "text")))
(type_me <- read(readxl_example("type-me.xls"), sheet = "date_coercion",
  col_types = c("date", "text")))
(type_me <- read(readxl_example("type-me.xlsx"), sheet = "text_coercion",
  col_types = c("text", "text")))
(xl <- read(readxl_example("geometry.xls"), col_names = FALSE))
(xl <- read(readxl_example("geometry.xlsx"), range = cell_rows(4:8)))

# Various examples from haven
library(haven)
haven_example <- function(path)
  system.file("examples", path, package = "haven", mustWork = TRUE)
(iris2 <- read(haven_example("iris.dta"))) # Stata v. 8-14
(iris2 <- read(haven_example("iris.sav"))) # SPSS, TODO: labelled -> factor?
(pbc <- read(data_example("pbc.por"))) # SPSS, POR format
(iris2 <- read$sas(haven_example("iris.sas7bdat"))) # SAS file
(afalfa <- read(data_example("afalfa.xpt"))) # SAS transport file
}
\seealso{
\code{\link[=read_csv]{read_csv()}}
}
\author{
Philippe Grosjean \href{mailto:phgrosjean@sciviews.org}{phgrosjean@sciviews.org}
}
\concept{
read and import data
}
\keyword{utilities}
